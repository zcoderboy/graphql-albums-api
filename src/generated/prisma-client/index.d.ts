// Code generated by Prisma (prisma@1.34.7). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  album: (where?: AlbumWhereInput) => Promise<boolean>;
  artist: (where?: ArtistWhereInput) => Promise<boolean>;
  genre: (where?: GenreWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  album: (where: AlbumWhereUniqueInput) => AlbumNullablePromise;
  albums: (args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Album>;
  albumsConnection: (args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AlbumConnectionPromise;
  artist: (where: ArtistWhereUniqueInput) => ArtistNullablePromise;
  artists: (args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Artist>;
  artistsConnection: (args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ArtistConnectionPromise;
  genre: (where: GenreWhereUniqueInput) => GenreNullablePromise;
  genres: (args?: {
    where?: GenreWhereInput;
    orderBy?: GenreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Genre>;
  genresConnection: (args?: {
    where?: GenreWhereInput;
    orderBy?: GenreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GenreConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAlbum: (data: AlbumCreateInput) => AlbumPromise;
  updateAlbum: (args: {
    data: AlbumUpdateInput;
    where: AlbumWhereUniqueInput;
  }) => AlbumPromise;
  updateManyAlbums: (args: {
    data: AlbumUpdateManyMutationInput;
    where?: AlbumWhereInput;
  }) => BatchPayloadPromise;
  upsertAlbum: (args: {
    where: AlbumWhereUniqueInput;
    create: AlbumCreateInput;
    update: AlbumUpdateInput;
  }) => AlbumPromise;
  deleteAlbum: (where: AlbumWhereUniqueInput) => AlbumPromise;
  deleteManyAlbums: (where?: AlbumWhereInput) => BatchPayloadPromise;
  createArtist: (data: ArtistCreateInput) => ArtistPromise;
  updateArtist: (args: {
    data: ArtistUpdateInput;
    where: ArtistWhereUniqueInput;
  }) => ArtistPromise;
  updateManyArtists: (args: {
    data: ArtistUpdateManyMutationInput;
    where?: ArtistWhereInput;
  }) => BatchPayloadPromise;
  upsertArtist: (args: {
    where: ArtistWhereUniqueInput;
    create: ArtistCreateInput;
    update: ArtistUpdateInput;
  }) => ArtistPromise;
  deleteArtist: (where: ArtistWhereUniqueInput) => ArtistPromise;
  deleteManyArtists: (where?: ArtistWhereInput) => BatchPayloadPromise;
  createGenre: (data: GenreCreateInput) => GenrePromise;
  updateGenre: (args: {
    data: GenreUpdateInput;
    where: GenreWhereUniqueInput;
  }) => GenrePromise;
  updateManyGenres: (args: {
    data: GenreUpdateManyMutationInput;
    where?: GenreWhereInput;
  }) => BatchPayloadPromise;
  upsertGenre: (args: {
    where: GenreWhereUniqueInput;
    create: GenreCreateInput;
    update: GenreUpdateInput;
  }) => GenrePromise;
  deleteGenre: (where: GenreWhereUniqueInput) => GenrePromise;
  deleteManyGenres: (where?: GenreWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  album: (
    where?: AlbumSubscriptionWhereInput
  ) => AlbumSubscriptionPayloadSubscription;
  artist: (
    where?: ArtistSubscriptionWhereInput
  ) => ArtistSubscriptionPayloadSubscription;
  genre: (
    where?: GenreSubscriptionWhereInput
  ) => GenreSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AlbumOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type ArtistOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "age_ASC"
  | "age_DESC";

export type GenreOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ArtistUpdateOneRequiredWithoutAlbumsInput {
  create?: Maybe<ArtistCreateWithoutAlbumsInput>;
  update?: Maybe<ArtistUpdateWithoutAlbumsDataInput>;
  upsert?: Maybe<ArtistUpsertWithoutAlbumsInput>;
  connect?: Maybe<ArtistWhereUniqueInput>;
}

export type AlbumWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AlbumUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface AlbumWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  genre?: Maybe<GenreWhereInput>;
  artist?: Maybe<ArtistWhereInput>;
  AND?: Maybe<AlbumWhereInput[] | AlbumWhereInput>;
  OR?: Maybe<AlbumWhereInput[] | AlbumWhereInput>;
  NOT?: Maybe<AlbumWhereInput[] | AlbumWhereInput>;
}

export interface GenreCreateOneWithoutAlbumsInput {
  create?: Maybe<GenreCreateWithoutAlbumsInput>;
  connect?: Maybe<GenreWhereUniqueInput>;
}

export interface AlbumUpdateWithWhereUniqueWithoutArtistInput {
  where: AlbumWhereUniqueInput;
  data: AlbumUpdateWithoutArtistDataInput;
}

export interface GenreCreateWithoutAlbumsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface ArtistWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  age?: Maybe<Int>;
  age_not?: Maybe<Int>;
  age_in?: Maybe<Int[] | Int>;
  age_not_in?: Maybe<Int[] | Int>;
  age_lt?: Maybe<Int>;
  age_lte?: Maybe<Int>;
  age_gt?: Maybe<Int>;
  age_gte?: Maybe<Int>;
  albums_every?: Maybe<AlbumWhereInput>;
  albums_some?: Maybe<AlbumWhereInput>;
  albums_none?: Maybe<AlbumWhereInput>;
  AND?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
  OR?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
  NOT?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
}

export interface ArtistCreateOneWithoutAlbumsInput {
  create?: Maybe<ArtistCreateWithoutAlbumsInput>;
  connect?: Maybe<ArtistWhereUniqueInput>;
}

export interface ArtistSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ArtistWhereInput>;
  AND?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
  OR?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
  NOT?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
}

export interface ArtistCreateWithoutAlbumsInput {
  id?: Maybe<ID_Input>;
  name: String;
  age: Int;
}

export interface GenreUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface AlbumUpdateInput {
  name?: Maybe<String>;
  genre?: Maybe<GenreUpdateOneRequiredWithoutAlbumsInput>;
  artist?: Maybe<ArtistUpdateOneRequiredWithoutAlbumsInput>;
}

export interface AlbumUpdateWithoutGenreDataInput {
  name?: Maybe<String>;
  artist?: Maybe<ArtistUpdateOneRequiredWithoutAlbumsInput>;
}

export interface GenreUpdateOneRequiredWithoutAlbumsInput {
  create?: Maybe<GenreCreateWithoutAlbumsInput>;
  update?: Maybe<GenreUpdateWithoutAlbumsDataInput>;
  upsert?: Maybe<GenreUpsertWithoutAlbumsInput>;
  connect?: Maybe<GenreWhereUniqueInput>;
}

export type ArtistWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GenreUpdateWithoutAlbumsDataInput {
  name?: Maybe<String>;
}

export interface GenreUpdateInput {
  name?: Maybe<String>;
  albums?: Maybe<AlbumUpdateManyWithoutGenreInput>;
}

export interface GenreUpsertWithoutAlbumsInput {
  update: GenreUpdateWithoutAlbumsDataInput;
  create: GenreCreateWithoutAlbumsInput;
}

export interface AlbumCreateManyWithoutGenreInput {
  create?: Maybe<AlbumCreateWithoutGenreInput[] | AlbumCreateWithoutGenreInput>;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
}

export interface AlbumScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  OR?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  NOT?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
}

export interface GenreCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  albums?: Maybe<AlbumCreateManyWithoutGenreInput>;
}

export interface ArtistUpdateWithoutAlbumsDataInput {
  name?: Maybe<String>;
  age?: Maybe<Int>;
}

export interface AlbumUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface ArtistUpsertWithoutAlbumsInput {
  update: ArtistUpdateWithoutAlbumsDataInput;
  create: ArtistCreateWithoutAlbumsInput;
}

export interface GenreSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GenreWhereInput>;
  AND?: Maybe<GenreSubscriptionWhereInput[] | GenreSubscriptionWhereInput>;
  OR?: Maybe<GenreSubscriptionWhereInput[] | GenreSubscriptionWhereInput>;
  NOT?: Maybe<GenreSubscriptionWhereInput[] | GenreSubscriptionWhereInput>;
}

export interface GenreWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  albums_every?: Maybe<AlbumWhereInput>;
  albums_some?: Maybe<AlbumWhereInput>;
  albums_none?: Maybe<AlbumWhereInput>;
  AND?: Maybe<GenreWhereInput[] | GenreWhereInput>;
  OR?: Maybe<GenreWhereInput[] | GenreWhereInput>;
  NOT?: Maybe<GenreWhereInput[] | GenreWhereInput>;
}

export interface AlbumUpsertWithWhereUniqueWithoutGenreInput {
  where: AlbumWhereUniqueInput;
  update: AlbumUpdateWithoutGenreDataInput;
  create: AlbumCreateWithoutGenreInput;
}

export interface AlbumUpsertWithWhereUniqueWithoutArtistInput {
  where: AlbumWhereUniqueInput;
  update: AlbumUpdateWithoutArtistDataInput;
  create: AlbumCreateWithoutArtistInput;
}

export interface AlbumUpdateManyWithoutGenreInput {
  create?: Maybe<AlbumCreateWithoutGenreInput[] | AlbumCreateWithoutGenreInput>;
  delete?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  set?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  disconnect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  update?: Maybe<
    | AlbumUpdateWithWhereUniqueWithoutGenreInput[]
    | AlbumUpdateWithWhereUniqueWithoutGenreInput
  >;
  upsert?: Maybe<
    | AlbumUpsertWithWhereUniqueWithoutGenreInput[]
    | AlbumUpsertWithWhereUniqueWithoutGenreInput
  >;
  deleteMany?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  updateMany?: Maybe<
    AlbumUpdateManyWithWhereNestedInput[] | AlbumUpdateManyWithWhereNestedInput
  >;
}

export interface AlbumUpdateWithoutArtistDataInput {
  name?: Maybe<String>;
  genre?: Maybe<GenreUpdateOneRequiredWithoutAlbumsInput>;
}

export type GenreWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ArtistCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  age: Int;
  albums?: Maybe<AlbumCreateManyWithoutArtistInput>;
}

export interface AlbumUpdateManyWithWhereNestedInput {
  where: AlbumScalarWhereInput;
  data: AlbumUpdateManyDataInput;
}

export interface AlbumUpdateManyWithoutArtistInput {
  create?: Maybe<
    AlbumCreateWithoutArtistInput[] | AlbumCreateWithoutArtistInput
  >;
  delete?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  set?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  disconnect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  update?: Maybe<
    | AlbumUpdateWithWhereUniqueWithoutArtistInput[]
    | AlbumUpdateWithWhereUniqueWithoutArtistInput
  >;
  upsert?: Maybe<
    | AlbumUpsertWithWhereUniqueWithoutArtistInput[]
    | AlbumUpsertWithWhereUniqueWithoutArtistInput
  >;
  deleteMany?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  updateMany?: Maybe<
    AlbumUpdateManyWithWhereNestedInput[] | AlbumUpdateManyWithWhereNestedInput
  >;
}

export interface ArtistUpdateInput {
  name?: Maybe<String>;
  age?: Maybe<Int>;
  albums?: Maybe<AlbumUpdateManyWithoutArtistInput>;
}

export interface AlbumCreateWithoutArtistInput {
  id?: Maybe<ID_Input>;
  name: String;
  genre: GenreCreateOneWithoutAlbumsInput;
}

export interface AlbumCreateManyWithoutArtistInput {
  create?: Maybe<
    AlbumCreateWithoutArtistInput[] | AlbumCreateWithoutArtistInput
  >;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
}

export interface AlbumCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  genre: GenreCreateOneWithoutAlbumsInput;
  artist: ArtistCreateOneWithoutAlbumsInput;
}

export interface ArtistUpdateManyMutationInput {
  name?: Maybe<String>;
  age?: Maybe<Int>;
}

export interface AlbumCreateWithoutGenreInput {
  id?: Maybe<ID_Input>;
  name: String;
  artist: ArtistCreateOneWithoutAlbumsInput;
}

export interface AlbumUpdateWithWhereUniqueWithoutGenreInput {
  where: AlbumWhereUniqueInput;
  data: AlbumUpdateWithoutGenreDataInput;
}

export interface AlbumSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AlbumWhereInput>;
  AND?: Maybe<AlbumSubscriptionWhereInput[] | AlbumSubscriptionWhereInput>;
  OR?: Maybe<AlbumSubscriptionWhereInput[] | AlbumSubscriptionWhereInput>;
  NOT?: Maybe<AlbumSubscriptionWhereInput[] | AlbumSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AlbumEdge {
  node: Album;
  cursor: String;
}

export interface AlbumEdgePromise extends Promise<AlbumEdge>, Fragmentable {
  node: <T = AlbumPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AlbumEdgeSubscription
  extends Promise<AsyncIterator<AlbumEdge>>,
    Fragmentable {
  node: <T = AlbumSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GenrePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
}

export interface GenrePreviousValuesPromise
  extends Promise<GenrePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface GenrePreviousValuesSubscription
  extends Promise<AsyncIterator<GenrePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ArtistPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  age: Int;
}

export interface ArtistPreviousValuesPromise
  extends Promise<ArtistPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  age: () => Promise<Int>;
}

export interface ArtistPreviousValuesSubscription
  extends Promise<AsyncIterator<ArtistPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
}

export interface ArtistSubscriptionPayload {
  mutation: MutationType;
  node: Artist;
  updatedFields: String[];
  previousValues: ArtistPreviousValues;
}

export interface ArtistSubscriptionPayloadPromise
  extends Promise<ArtistSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArtistPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArtistPreviousValuesPromise>() => T;
}

export interface ArtistSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArtistSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArtistSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArtistPreviousValuesSubscription>() => T;
}

export interface AggregateGenre {
  count: Int;
}

export interface AggregateGenrePromise
  extends Promise<AggregateGenre>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGenreSubscription
  extends Promise<AsyncIterator<AggregateGenre>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GenreConnection {
  pageInfo: PageInfo;
  edges: GenreEdge[];
}

export interface GenreConnectionPromise
  extends Promise<GenreConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GenreEdge>>() => T;
  aggregate: <T = AggregateGenrePromise>() => T;
}

export interface GenreConnectionSubscription
  extends Promise<AsyncIterator<GenreConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GenreEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGenreSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateArtist {
  count: Int;
}

export interface AggregateArtistPromise
  extends Promise<AggregateArtist>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArtistSubscription
  extends Promise<AsyncIterator<AggregateArtist>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AlbumConnection {
  pageInfo: PageInfo;
  edges: AlbumEdge[];
}

export interface AlbumConnectionPromise
  extends Promise<AlbumConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AlbumEdge>>() => T;
  aggregate: <T = AggregateAlbumPromise>() => T;
}

export interface AlbumConnectionSubscription
  extends Promise<AsyncIterator<AlbumConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AlbumEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAlbumSubscription>() => T;
}

export interface ArtistConnection {
  pageInfo: PageInfo;
  edges: ArtistEdge[];
}

export interface ArtistConnectionPromise
  extends Promise<ArtistConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArtistEdge>>() => T;
  aggregate: <T = AggregateArtistPromise>() => T;
}

export interface ArtistConnectionSubscription
  extends Promise<AsyncIterator<ArtistConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArtistEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArtistSubscription>() => T;
}

export interface Artist {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  age: Int;
}

export interface ArtistPromise extends Promise<Artist>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  age: () => Promise<Int>;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtistSubscription
  extends Promise<AsyncIterator<Artist>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  albums: <T = Promise<AsyncIterator<AlbumSubscription>>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtistNullablePromise
  extends Promise<Artist | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  age: () => Promise<Int>;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AlbumPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
}

export interface AlbumPreviousValuesPromise
  extends Promise<AlbumPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface AlbumPreviousValuesSubscription
  extends Promise<AsyncIterator<AlbumPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AlbumSubscriptionPayload {
  mutation: MutationType;
  node: Album;
  updatedFields: String[];
  previousValues: AlbumPreviousValues;
}

export interface AlbumSubscriptionPayloadPromise
  extends Promise<AlbumSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AlbumPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AlbumPreviousValuesPromise>() => T;
}

export interface AlbumSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AlbumSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AlbumSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AlbumPreviousValuesSubscription>() => T;
}

export interface Album {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
}

export interface AlbumPromise extends Promise<Album>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  genre: <T = GenrePromise>() => T;
  artist: <T = ArtistPromise>() => T;
}

export interface AlbumSubscription
  extends Promise<AsyncIterator<Album>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  genre: <T = GenreSubscription>() => T;
  artist: <T = ArtistSubscription>() => T;
}

export interface AlbumNullablePromise
  extends Promise<Album | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  genre: <T = GenrePromise>() => T;
  artist: <T = ArtistPromise>() => T;
}

export interface Genre {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
}

export interface GenrePromise extends Promise<Genre>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GenreSubscription
  extends Promise<AsyncIterator<Genre>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  albums: <T = Promise<AsyncIterator<AlbumSubscription>>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GenreNullablePromise
  extends Promise<Genre | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtistEdge {
  node: Artist;
  cursor: String;
}

export interface ArtistEdgePromise extends Promise<ArtistEdge>, Fragmentable {
  node: <T = ArtistPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArtistEdgeSubscription
  extends Promise<AsyncIterator<ArtistEdge>>,
    Fragmentable {
  node: <T = ArtistSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GenreSubscriptionPayload {
  mutation: MutationType;
  node: Genre;
  updatedFields: String[];
  previousValues: GenrePreviousValues;
}

export interface GenreSubscriptionPayloadPromise
  extends Promise<GenreSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GenrePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GenrePreviousValuesPromise>() => T;
}

export interface GenreSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GenreSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GenreSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GenrePreviousValuesSubscription>() => T;
}

export interface GenreEdge {
  node: Genre;
  cursor: String;
}

export interface GenreEdgePromise extends Promise<GenreEdge>, Fragmentable {
  node: <T = GenrePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GenreEdgeSubscription
  extends Promise<AsyncIterator<GenreEdge>>,
    Fragmentable {
  node: <T = GenreSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAlbum {
  count: Int;
}

export interface AggregateAlbumPromise
  extends Promise<AggregateAlbum>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAlbumSubscription
  extends Promise<AsyncIterator<AggregateAlbum>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Genre",
    embedded: false
  },
  {
    name: "Artist",
    embedded: false
  },
  {
    name: "Album",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
